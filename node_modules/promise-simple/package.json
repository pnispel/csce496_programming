{
  "name": "promise-simple",
  "description": "Simple implementation of CommonJS Promises/A.",
  "version": "0.1.0",
  "author": {
    "name": "Yoshimasa Wakahara",
    "email": "y.wakahara@gmail.com"
  },
  "license": "MIT-License",
  "keywords": [
    "promise",
    "deferred",
    "async",
    "commonjs"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/waka/js-promise-simple.git"
  },
  "main": "./promise-simple",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "devDependencies": {
    "mocha": ">= 1.8.1"
  },
  "readme": "# js-promise-simple\n\nThe simple implementation of CommonJS Promises/A.\n\n\n## Usage\n\n### From node.js\n\n```javascript\nvar Promise = require('promise-simple');\n\nPromise.defer()\n.next(function() {\n  return \"ok\"; // call after 1000ms.\n}, 1000)\n.next(function(res) {\n  console.log(res); // call after 2000ms, and res is \"ok\"\n}, 2000);\n```\n\n### From browser side javascript\n\n```html\n<script src=\"/path/to/promise-simple.js\"></script>\n```\n\n```javascript\nvar asyncFunc1 = function() {\n  var d = Promise.defer();\n  setTimeout(function() {\n    d.resolve(\"first\");\n  }, 1000);\n  return d;\n};\nvar asyncFunc2 = function() {\n  var d = Promise.defer();\n  setTimeout(function() {\n    d.resolve(\"second\");\n  }, 1000);\n  return d;\n};\n\nPromise.when(asyncFunc1, asyncFunc2).then(function(results) {\n  console.log(results[0]); // \"first\"\n  console.log(results[1]); // \"second\"\n});\n```\n\n### Testing\n\nUsing mocha from Node.js.\n\n```sh\n$npm test\n```\n\nor open \"test/browser/promise-simple\\_test.html\" by some browser.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/waka/js-promise-simple/issues"
  },
  "_id": "promise-simple@0.1.0",
  "dist": {
    "shasum": "2585a93e2fbd90990f1ef3ee6009b7a64d99775a"
  },
  "_from": "promise-simple@",
  "_resolved": "https://registry.npmjs.org/promise-simple/-/promise-simple-0.1.0.tgz"
}
